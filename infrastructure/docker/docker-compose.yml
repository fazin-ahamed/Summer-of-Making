version: '3.8'

services:
  # Neo4j database for graph storage
  neo4j:
    image: neo4j:5.12-community
    container_name: autoorganize-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      NEO4J_AUTH: neo4j/autoorganize123
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "autoorganize123", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7.2-alpine
    container_name: autoorganize-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass autoorganize123
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "autoorganize123", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API service
  api:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.api
    container_name: autoorganize-api
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: autoorganize123
      REDIS_URL: redis://:autoorganize123@redis:6379
      DATABASE_URL: /app/data/autoorganize.db
      RUST_LOG: info
    volumes:
      - ./backend/api:/app
      - ./shared:/app/shared
      - ./rust-core:/app/rust-core
      - api_data:/app/data
      - /app/node_modules
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Desktop app development server
  desktop:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.desktop
    container_name: autoorganize-desktop
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:3001
    volumes:
      - ./apps/desktop:/app
      - ./shared:/app/shared
      - /app/node_modules
    depends_on:
      - api
    restart: unless-stopped

  # Web app development server
  web:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.web
    container_name: autoorganize-web
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:3001
    volumes:
      - ./apps/web:/app
      - ./shared:/app/shared
      - /app/node_modules
    depends_on:
      - api
    restart: unless-stopped

  # Rust development environment
  rust-dev:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.rust
    container_name: autoorganize-rust-dev
    volumes:
      - ./rust-core:/workspace
      - rust_target:/workspace/target
    working_dir: /workspace
    command: cargo watch -x build
    restart: unless-stopped

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  api_data:
    driver: local
  rust_target:
    driver: local

networks:
  default:
    driver: bridge